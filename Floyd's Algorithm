# Floyd's Algorithm

# Number of vertices
V = 4

# Initialize the distance matrix
dist = [[float("inf")] * V for _ in range(V)]

# Example graph represented as an adjacency matrix
graph = [[0, 3, float("inf"), 7],
         [8, 0, 2, float("inf")],
         [5, float("inf"), 0, 1],
         [2, float("inf"), float("inf"), 0]]

# Initialize the distance matrix with the graph values
for i in range(V):
    for j in range(V):
        dist[i][j] = graph[i][j]

# Floyd's Algorithm
for k in range(V):
    for i in range(V):
        for j in range(V):
            if dist[i][j] > dist[i][k] + dist[k][j]:
                dist[i][j] = dist[i][k] + dist[k][j]

# Print the shortest distance matrix
for i in range(V):
    for j in range(V):
        if dist[i][j] == float("inf"):
            print("inf", end=" ")
        else:
            print(dist[i][j], end=" ")
    print()
