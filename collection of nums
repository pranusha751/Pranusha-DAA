# Unique Permutations of a Collection of Numbers
from typing import List

def permuteUnique(nums: List[int]) -> List[List[int]]:
    def backtrack(start: int):
        if start == len(nums):
            result.append(nums[:])
            return
        seen = set()
        for i in range(start, len(nums)):
            if nums[i] in seen:
                continue
            seen.add(nums[i])
            nums[start], nums[i] = nums[i], nums[start]
            backtrack(start + 1)
            nums[start], nums[i] = nums[i], nums[start]

    result = []
    nums.sort()
    backtrack(0)
    return result

# Example usage
print(permuteUnique([1, 1, 2]))
print(permuteUnique([1, 2, 3]))
