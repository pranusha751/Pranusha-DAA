def is_safe(board, row, col):
    for i in range(row):
        if board[i] == col or \
           board[i] - i == col - row or \
           board[i] + i == col + row:
            return False
    return True

def solve_n_queens(n, board, row):
    if row == n:
        return [board[:]]
    solutions = []
    for col in range(n):
        if is_safe(board, row, col):
            board[row] = col
            for solution in solve_n_queens(n, board, row + 1):
                solutions.append(solution)
    return solutions

# a. 8x10 Board
def solve_8x10():
    n = 8
    board = [-1] * n
    solutions = solve_n_queens(10, board, 0)
    return solutions

# b. 5x5 Board with Obstacles
def is_safe_with_obstacles(board, row, col, obstacles):
    if (row, col) in obstacles:
        return False
    return is_safe(board, row, col)

def solve_n_queens_with_obstacles(n, board, row, obstacles):
    if row == n:
        return [board[:]]
    solutions = []
    for col in range(n):
        if is_safe_with_obstacles(board, row, col, obstacles):
            board[row] = col
            for solution in solve_n_queens_with_obstacles(n, board, row + 1, obstacles):
                solutions.append(solution)
    return solutions

def solve_5x5_with_obstacles():
    n = 5
    obstacles = [(2, 2), (4, 4)]
    board = [-1] * n
    solutions = solve_n_queens_with_obstacles(n, board, 0, obstacles)
    return solutions

# c. 6x6 Board with Restricted Positions
def is_safe_with_restrictions(board, row, col, restricted):
    if col in restricted:
        return False
    return is_safe(board, row, col)

def solve_n_queens_with_restrictions(n, board, row, restricted):
    if row == n:
        return [board[:]]
    solutions = []
    for col in range(n):
        if is_safe_with_restrictions(board, row, col, restricted):
            board[row] = col
            for solution in solve_n_queens_with_restrictions(n, board, row + 1, restricted):
                solutions.append(solution)
    return solutions

def solve_6x6_with_restrictions():
    n = 6
    restricted = [2, 4]
    board = [-1] * n
    solutions = solve_n_queens_with_restrictions(n, board, 0, restricted)
    return solutions

# Example Outputs
print("8x10 Board Solutions:", solve_8x10())
print("5x5 Board with Obstacles Solutions:", solve_5x5_with_obstacles())
print("6x6 Board with Restricted Positions Solutions:", solve_6x6_with_restrictions())
